import "../../operations/derived/_importDerived.eol";

context JUDOPSM!EntityType {

	// entity has no multiple data properties with the same name	
	constraint DataPropertyNameIsUnique {
		check: self.dataProperties.select(a | self.dataProperties.excluding(a).select(a2 | a2.name == a.name).size() > 0).size() == 0
		message: "Multiple data properties are added to entity " + self.name + " with the same name"
	}

	// entity has no multiple navigation properties with the same name
	constraint NavigationPropertyNameIsUnique {
		check: self.navigationProperties.select(e | self.navigationProperties.excluding(e).select(e2 | e2.name == e.name).size() > 0).size() == 0
		message: "Multiple navigation properties are added to entity " + self.name + " with the same name"
	}
}

context JUDOPSM!DataProperty {

    // data properties must be attached to entities
    constraint DataPropertyBelongsToEntity {
        check: JUDOPSM!EntityType.all.select(et | et.dataProperties.contains(self)).size() == 1
        message: "Orphan data property: " + self.name
    }
    
    // type of getter expression is string
    constraint DataPropertyGetterTypeIsString {
        guard: self.dataType.isKindOf(JUDOPSM!StringType)
        
        check: self.getterExpression.isKindOf(EXPR!StringExpression)
        message: "Getter expression of derived attribute " + self.displayName() + " is not string: " + self.getterExpression.toString()
    }
    
    // type of getter expression is boolean
    constraint DataPropertyGetterTypeIsBoolean {
        guard: self.dataType.isKindOf(JUDOPSM!BooleanType)
        
        check: self.getterExpression.isKindOf(EXPR!LogicalExpression)
        message: "Getter expression of derived attribute " + self.displayName() + " is not boolean: " + self.getterExpression.toString()
    }
    
    // type of getter expression is integer
    constraint DataPropertyGetterTypeIsInteger {
        guard: self.dataType.isKindOf(JUDOPSM!NumericType) and self.dataType.precision == 0
        
        check: self.getterExpression.isKindOf(EXPR!IntegerExpression)
        message: "Getter expression of derived attribute " + self.displayName() + " is not integer: " + self.getterExpression.toString()
    }
    
    // type of getter expression is decimal
    constraint DataPropertyGetterTypeIsDecimal {
        guard: self.dataType.isKindOf(JUDOPSM!NumericType) and self.dataType.precision > 0
        
        check: self.getterExpression.isKindOf(EXPR!DecimalExpression)
        message: "Getter expression of derived attribute " + self.displayName() + " is not decimal: " + self.getterExpression.toString()
    }
    
    // type of getter expression is enumeration
    constraint DataPropertyGetterTypeIsEnumeration {
        guard: self.dataType.isKindOf(JUDOPSM!EnumerationType)
        
        check: self.getterExpression.isKindOf(EXPR!EnumerationExpression)
        message: "Getter expression of derived attribute " + self.displayName() + " is not enumeration: " + self.getterExpression.toString()
    }
    
    // getter expression is an attribute selector and matching to PSM model type
    constraint DataPropertyGetterTypeIsValid {
        guard: self.getterExpression.isKindOf(EXPR!AttributeSelector)
        
        check: self.dataType.type() == self.getterExpression.getAttributeType().type()
        message: "Getter expression of derived attribute " + self.displayName() + " is not valid"
    }
    
    // getter expression is an attribute selector and custom type is referencing the same PSM type (instance)  
    constraint CustomDataPropertyGetterTypeIsValid {
        guard: self.dataType.isTypeOf(JUDOPSM!CustomType) and self.getterExpression.isKindOf(EXPR!AttributeSelector)
        
        check: self.dataType == self.getterExpression.getAttributeType()
        message: "Getter expression of derived attribute " + self.displayName() + " has invalid custom data type: " + self.getterExpression.toString()
    }
    
    // setter type of data property is valid
    //constraint DataPropertySetterTypeIsValid {
    //}
}

context JUDOPSM!NavigationProperty {

    // navigation properties must be attached to entities
    constraint NavigationPropertyBelongsToEntity {
        check: JUDOPSM!EntityType.all.select(et | et.navigationProperties.contains(self)).size() == 1
        message: "Orphan navigation property: " + self.name
    }
}
