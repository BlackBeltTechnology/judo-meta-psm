context EXPR!TypeName {

    // namespace of ElementName must exists 
    constraint NamespaceIsValid {
        check: self.getNamespace().isDefined()
        message: "Namespace is not defined: " + self.namespace
    }
    
    // object type with name defined by ElementName must exists in the namespace
    constraint ObjectTypeIsValid {
        guard: self.satisfiesAll("NamespaceIsValid")
        
        check: self.get().isDefined()
        message: "Element named " + self.name + " not found in namespace " + self.namespace 
    }
}

context EXPR!Expression {

    // variable reference in lambda expression is referencing to variable visible from its scope
    constraint LambdaVariableIsValid {
        guard: self.isLambdaExpression()
        
        check: self.getLambdaBasePath().containsAll(self.getBaseExpressions().select(e | e.isKindOf(EXPR!VariableReference)).collect(e | e.variable))
        message: "Invalid variable references: " + self.getBaseExpressions().select(e | e.isKindOf(EXPR!VariableReference)).collect(e | e.variable).excludingAll(self.getLambdaBasePath()).collect(e | e.toString()) + " in expression: " + self.toString()
    }
}
