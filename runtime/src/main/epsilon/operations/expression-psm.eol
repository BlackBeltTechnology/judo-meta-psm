operation JUDOPSM!EntityType getReferenceType(name: String) : JUDOPSM!ReferenceTypedElement {
    var relation = self.relations.selectOne(r | r.name = name);
    var navigation = JUDOPSM!NavigationProperty.all.selectOne(n | n.name == name and n.getEntityType() == self);
    
    if (relation.isDefined()) {
        return relation;
    } else if (navigation.isDefined()) {
        return navigation;
    } else {
        // checking super types recursively
        var super = self.superEntityTypes;
        while (super.isDefined() and not super.isEmpty()) {
            var super2 = new Sequence;
            for (s in super) {
                relation = s.relations.selectOne(r | r.name == name);
                navigation = JUDOPSM!NavigationProperty.all.selectOne(n | n.name == name and n.getEntityType() == s);
                
                if (relation.isDefined()) {
                    return relation;
                } else if (navigation.isDefined()) {
                    return navigation;
                }
                
                super2.addAll(s.superEntityTypes);
            }
            super = super2;
        }
    }
    
    return null;
}

@cached
operation JUDOPSM!ReferenceTypedElement isCollection() : Boolean {
    return self.cardinality.upper > 1 or self.cardinality.upper == -1;
}

@cached
operation JUDOPSM!ReferenceTypedElement getTarget() : JUDOPSM!EntityType {
    return self.target;
}

operation JUDOPSM!EntityType getAttribute(name: String) : JUDOPSM!Attribute {
    return self.attributes.selectOne(r | r.name = name);
}

operation JUDOPSM!EntityType getProperty(name: String) : JUDOPSM!DataProperty {
    return JUDOPSM!DataProperty.all.selectOne(p | p.name == name and p.getEntityType() == self);
}

operation JUDOPSM!EntityType getAttributeType(name: String) : JUDOPSM!Primitive {
    var attr = self.getAttribute(name);
    var prop = self.getProperty(name);
    
    if (attr.isDefined()) {
        return attr.dataType;
    } else if (prop.isDefined()) {
        return prop.dataType;
    } else {
        // checking super types recursively
        var super = self.superEntityTypes;
        while (super.isDefined() and not super.isEmpty()) {
            var super2 = new Sequence;
            for (s in super) {
                attr = s.attributes.selectOne(a | a.name == name);
                prop = JUDOPSM!DataProperty.all.selectOne(p | p.name == name and p.getEntityType() == s);
                
                if (attr.isDefined()) {
                    return attr.dataType;
                } else if (prop.isDefined()) {
                    return prop.dataType;
                }
                
                super2.addAll(s.superEntityTypes);
            }
            super = super2;
        }
    }
    
    return null;
}

@cached
operation JUDOPSM!EntityType getSuperTypes() : Sequence {
    var result = new Sequence;
    
    var super = self.superEntityTypes;
    while (super.isDefined() and not super.isEmpty()) {
        result.addAll(super);
        
        var super2 = new Sequence;
        for (s in super) {
            super2.addAll(s.superEntityTypes);
        }
        super = super2;
    }
    
    return result;
}

@cached
operation JUDOPSM!Primitive isNumeric() : Boolean {
    return self.isKindOf(JUDOPSM!NumericType);
}

@cached
operation JUDOPSM!Primitive isInteger() : Boolean {
    return self.isNumeric() and self.scale == 0;
}

@cached
operation JUDOPSM!Primitive isDecimal() : Boolean {
    return self.isNumeric() and self.scale > 0;
}

@cached
operation JUDOPSM!Primitive isBoolean() : Boolean {
    return self.isKindOf(JUDOPSM!BooleanType);
}

@cached
operation JUDOPSM!Primitive isString() : Boolean {
    return self.isKindOf(JUDOPSM!StringType);
}

@cached
operation JUDOPSM!Primitive isEnumeration() : Boolean {
    return self.isKindOf(JUDOPSM!EnumerationType);
}

@cached
operation JUDOPSM!Primitive isCustom() : Boolean {
    return not self.isNumeric() and not self.isBoolean() and not self.isString() and not self.isEnumeration();
}

operation JUDOPSM!EnumerationType contains(memberName : String) : Boolean {
    return self.members.selectOne(m | m.name = memberName).isDefined();
}

@cached
operation JUDOPSM!NamedElement getName() : String {
    return self.name;
}
