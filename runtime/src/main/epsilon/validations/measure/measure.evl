context JUDOPSM!Measure {

    // base unit of measure should be defined (recommended only, base unit is used for calculations)
    critique BaseUnitShouldBeDefined {
        check: self.units.exists(u | u.rateDividend = u.rateDivisor)
        message: "No base unit is defined for measure: " + self.name
    }

    /*// no multiple measures are defined for the same dimension
    constraint DimensionsAreUnique {
        check {
            var dimensions = new Map;
		    for (m in JUDOPSM!Measure.all.excluding(self)) {
		        dimensions.put(m.getBaseMeasures(), m);
		    }
		    return not dimensions.containsKey(self.getBaseMeasures());
        }
        message: "Multiple measures are defined for the same dimension: " + self.name
    } */
    
    // measure name should be unique
    critique MeasureNameIsUnique {
        check: not JUDOPSM!Measure.all.excluding(self).selectOne(m | m.name == self.name).isDefined()
        message: "Measure name is not unique: " + self.name
    }
    
    // symbol of measures must be unique
    constraint MeasureSymbolIsUnique {
        guard: self.symbol.isDefined()
        
        check: not JUDOPSM!Measure.all.excluding(self).selectOne(m | m.symbol == self.symbol).isDefined()
        message: "Measure symbol is not unique: " + self.symbol + " (measure: " + self.name + ")"
    }
}

context JUDOPSM!DerivedMeasure {

    // circular references in derived measure definitions is invalid
    constraint NoCircularReferencesOfDerivedMeasures {
        check: not self.getAllTermMeasures().contains(self)
        message: "Derived measure definition " + self.name + " is recursive"
    }
}
