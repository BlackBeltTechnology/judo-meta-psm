@cached
operation EXPR!Concatenate getOperands() : Collection {
    return Set{self.left, self.right};
}

@cached
operation EXPR!LowerCase getOperands() : Collection {
    return Set{self.expression};
}

@cached
operation EXPR!UpperCase getOperands() : Collection {
    return Set{self.expression};
}

@cached
operation EXPR!Length getOperands() : Collection {
    return Set{self.expression};
}

@cached
operation EXPR!SubString getOperands() : Collection {
    return Set{self.expression, self.position, self.length};
}

@cached
operation EXPR!Position getOperands() : Collection {
    return Set{self.container, self.containment};
}

@cached
operation EXPR!Replace getOperands() : Collection {
    return Set{self.expression, self.pattern, self.replacement};
}

@cached
operation EXPR!Trim getOperands() : Collection {
    return Set{self.expression};
}

@cached
operation EXPR!ConcatenateCollection getOperands() : Collection {
    return self.collectionExpression;
}

@cached
operation EXPR!ConcatenateCollection getLambdaExpressions() : Collection {
    return Set{self.expression};
}

@cached
operation EXPR!StringSwitchExpression getOperands() : Collection {
    var operands = new Set;
    operands.addAll(self.cases.collect(c | c.condition));
    operands.addAll(self.cases.collect(c | c.expression));
    if (self.defaultExpression.isDefined()) {
        operands.add(self.defaultExpression);
    }
    return operands;
}
