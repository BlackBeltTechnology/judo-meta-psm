context EXPR!StringAttribute {
    constraint AttributeTypeIsString {
        guard: self.satisfiesAll("Resolved")
        
        check: self.getAttributeType().isString()
        message: "Attribute type of " + self.attributeName + " of object type " + self.objectExpression.getObjectType().getName() + " is not string"
    }
}

context EXPR!Concatenate {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!LowerCase {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!UpperCase {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!Length {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!SubString {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!Position {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!Replace {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!Trim {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    } 
}

context EXPR!StringSwitchExpression {
    constraint Resolved {
        check: true
        message: "Unsupported expression: " + self.toString()
    }

    constraint TypeOfDefaultCaseIsString {
        guard: self.defaultExpression.isDefined() and self.defaultExpression.satisfiesAll("Resolved")
        
        check: self.defaultExpression.isKindOf(EXPR!StringExpression)
        message: "Type of default case expression is not string: " + self.defaultExpression.toString()
    }
}

context EXPR!SwitchCase {
    constraint TypeOfSwitchCaseIsString {
        guard: self.getSwitchExpression().satisfiesAll("Resolved") and self.getSwitchExpression().isKindOf(EXPR!StringExpression)
        
        check: self.expression.isKindOf(EXPR!StringExpression)
        message: "Type of switch case expression is not string: " + self.expression.toString()
    }
}

// TODO: ConcatenateCollection -> collection must be ordered
// TODO: ConcatenateCollection -> fork is not allowed (by expression argument)