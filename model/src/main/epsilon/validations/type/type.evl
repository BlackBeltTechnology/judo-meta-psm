context PSM!Primitive {
    // primitive type names should be unique
    critique PrimitiveTypeNamesAreUnique {
        check: not PSM!Primitive.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Primitive type name is not unique: " + self.name
    }
}

context PSM!TransferObjectType {
    // transfer object type names should be unique
    critique TransferObjectTypeNamesAreUnique {
        check: not PSM!TransferObjectType.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Transfer object type name is not unique: " + self.name
    }
    
    constraint BoundOperationInheritanceIsValid {
        guard: self.isKindOf(PSM!MappedTransferObjectType)
        check {
            var operations : new Sequence;
            operations.addAll(self.operations.collect(o | o.name.toLowerCase()));
            for (s in self.getAllSuperTransferObjectTypes()) {
                operations.addAll(s.operations.collect(n | n.name.toLowerCase()));
            }
            return operations.forAll(op | self.getAllSuperTransferObjectTypes().select(
                    t | t.operations.exists(o | o.name.toLowerCase() == op) and
                    t.getAllSuperTransferObjectTypes().forAll(
                            t2 | t2.operations.forAll(o | o.name.toLowerCase() <> op))
                    ).size() <= 1 );
        }
        message: "Mapped transfer object type: " + self.name + " is inheriting operation(s) having the same name from unrelated mapped transfer object."
    }
}