//TODO-endcheck
context PSM!AssociationEnd {

	// upper attribute must be at least 1    
    constraint UpperIsAtLeastOne {
    	check: self.cardinality.upper > 0 or self.cardinality.upper == -1
    	message: "Invalid upper attribute of " + self.name
    }
    
    // lower property must be less or equal to upper property
    constraint LowerMustBeLessOrEqualToUpper {
        check: self.cardinality.lower <> -1 and (self.cardinality.upper == -1 or self.cardinality.lower <= self.cardinality.upper)
    	message: "Lower (" + self.cardinality.lower + ") must be less or equal to upper (" + self.cardinality.upper + ") of attribute: " + self.name
    }
    
    constraint CascadeDeleteOnlyAllowedIfUpperCardinalityIsOne {
        guard: self.reverseCascadeDelete == true
        check : self.cardinality.upper == 1
        message: "Cascade delete behavior only allowed on endpoints if their upper cardinality is 1: " + self.name
    }
}

//TODO-endcheck
context PSM!AssociationEnd {

    guard: self.partner.isDefined()

    // partner of an endpoint must be a different one
    constraint PartnerIsNotSelf {
        check: self.partner <> self
        message: "Self partner relation found: " + self
    }

    // opposite partner must be defined if a partner in endpoint is already defined
    constraint OppositePartnerIsDefined {
        guard: self.satisfiesAll("PartnerIsNotSelf")
    	check: self.partner.partner.isDefined()
    	message: "Missing opposite partner relation for " + self
    }

    // if partners are specified on both sides of a relation then endpoints must relation to each other
    constraint ValidPartnerRelations {
    	guard: self.satisfiesAll("OppositePartnerIsDefined")
    	check: self.partner.partner = self
    	message: "Opposite partner relation of " + self.partner + " must be " + self
    }

    // target and partner types must be aligned
    constraint ValidPartnerType {
        check: self.partner.getEntityType() = self.target and self.partner.target = self.getEntityType()
        message: "Invalid partner type: " + self.partner + " for " + self
    }

	critique AtLeastOneReferenceInBidirectionalAssociationHasZeroLowerBound {
	    guard: self.satisfiesAll("ValidPartnerRelations", "ValidPartnerType") and self.partner.satisfiesAll("ValidPartnerRelations", "ValidPartnerType")
	    check: ((self.cardinality.lower == 0) or (self.partner.cardinality.lower == 0))
	    message: "At least one reference of a bidirectional association should have lower bound with zero: " + self + " or " + self.partner
	}
}
