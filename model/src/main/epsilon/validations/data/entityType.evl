context PSM!EntityType {
    // recursive inheritance is not supported
	constraint InheritanceIsNotRecursive {
		check: not self.getAllSuperEntityTypes().contains(self)
		message: "Entity type " + self.name + " is recursive"
	}

	/* As a great man once said:
	"It is not allowed that an entity has two different inherited or non inherited members
    with the same name. Thus, member overriding is not allowed. Two members are
    considered to be different if they are defined in two separate entities or if they
    have different names." - unknown, 2019, uncolorized
    */
    //TODO: endcheck, selfcheck, lifecheck, worldcheck, checkcheck
    constraint InheritedAndNonInheritedNamesAreUnique {
        guard: self.satisfiesAll("InheritanceIsNotRecursive") and not self.superEntityTypes.isEmpty()
        check {
            var uniqueNames = new Set;
            var duplicateNames = new Sequence;
            var members = new Sequence;
            var entities = new Sequence;
            entities.add(self);
            entities.addAll(self.getAllSuperEntityTypes());
            for (entity in entities) {
                members.addAll(entity.attributes);
                members.addAll(entity.relations);
                members.addAll(entity.dataProperties);
                members.addAll(entity.navigationProperties);
                //TODO-suspended: Sequence [after entity.Sequence becomes supported] & newficsorz
                for (member in members) {
                    for (name in uniqueNames) {
                        if(name.toUpperCase() == member.name.toUpperCase()) {
                            duplicateNames.add(member.name);
                        }
                    }
                    uniqueNames.add(member.name);
                }
                members.clear();
            }
            return duplicateNames.isEmpty();
        }
        message: "Entity " + self.name + " has inherited or non inherited members with the same name, member overriding is not allowed: " + duplicateNames
    }


	// entity has no multiple attributes with the same name
	constraint AttributeNameIsUnique {
		check: self.attributes.select(a | self.attributes.excluding(a).select(a2 | a2.name == a.name).size() > 0).size() == 0
		message: "Multiple attributes are added to entity " + self.name + " with the same name"
	}

	// entity has nomultiple relations with the same name
	constraint RelationNameIsUnique {
		check: self.relations.select(e | self.relations.excluding(e).select(e2 | e2.name == e.name).size() > 0).size() == 0
		message: "Multiple relations are added to entity " + self.name + " with the same name"
	}

	// entity has no attribute(s) and relations(s) with the same name
	constraint NoAttributeAndRelationAreWithTheSameName {
		check: self.relations.select(e | self.attributes.select(a | e.name == a.name).size() > 0).size() == 0
		message: "Entity " + self.name + " has attributes and relations with the same name"
	}

    //TODO-suspended: Sequence (duplicate name check) [after Sequence becomes supported]

    //TODO-suspended: Seq & Attr, Seq & Rel, Se & RelCC (duplicate name check) [after Sequence becomes supported]
}

context PSM!Attribute {
    // attributes must be attached to entities
    constraint AttributeBelongsToEntity {
        check: PSM!EntityType.all.select(et | et.attributes.contains(self)).size() == 1
        message: "Orphan attribute: " + self.name
    }
}
