context PSM!EntityType {

    // entity type names should be unique
    critique EntityTypeNamesAreUnique {
        check: not PSM!EntityType.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Entity type name is not unique: " + self.name
    }

    // recursive inheritance is not supported
	constraint InheritanceIsNotRecursive {
		check: not self.getAllSuperEntityTypes().contains(self)
		message: "Entity type " + self.name + " is recursive"
	}

	/* As a great man once said:
	"It is not allowed that an entity has two different inherited or non inherited members
    with the same name. Thus, member overriding is not allowed. Two members are
    considered to be different if they are defined in two separate entities or if they
    have different names." - unknown, 2019, uncolorized
    */
    //TODO: endcheck, selfcheck, lifecheck, worldcheck, checkcheck
    constraint InheritedAndNonInheritedNamesAreUnique {
        guard: self.satisfiesAll("InheritanceIsNotRecursive") and not self.superEntityTypes.isEmpty()
        check {
            var uniqueNames = new Set;
            var duplicateNames = new Sequence;
            var members = new Sequence;
            var entities = new Sequence;
            entities.add(self);
            entities.addAll(self.getAllSuperEntityTypes());
            for (entity in entities) {
                members.addAll(entity.attributes);
                members.addAll(entity.relations);
                members.addAll(entity.dataProperties);
                members.addAll(entity.navigationProperties);
                //TODO-suspended: Sequence [after entity.Sequence becomes supported] & newficsorz
                for (member in members) {
                    for (name in uniqueNames) {
                        if(name.toUpperCase() == member.name.toUpperCase()) {
                            duplicateNames.add(member.name);
                        }
                    }
                    uniqueNames.add(member.name);
                }
                members.clear();
            }
            return duplicateNames.isEmpty();
        }
        message: "Entity " + self.name + " has inherited or non inherited members with the same name, member overriding is not allowed: " + duplicateNames
    }

    //TODO-suspended: Seq & Attr, Seq & Rel, Se & RelCC (duplicate name check) [after Sequence becomes supported]
}