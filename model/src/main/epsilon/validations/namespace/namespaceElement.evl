//TODO-endcheck
context PSM!NamespaceElement {
    // namespace element must have exactly one namespace
    /*constraint NamespaceElementBelongsToOneNamespace {
        check: PSM!Namespace.all.select(n | n.elements.contains(self)).size() == 1
        message: "Element " + self.name + " must belong to exactly 1 namespace"
    }*/

    constraint ElementNameNotEmpty {
        check: self.name.length() > 0
        message: "NamespaceElement name must contain at least one character. Zero length name found in " + self
    }

    constraint ElementNameContainsValidCharacters {
        guard: self.satisfies("ElementNameNotEmpty")
        check: self.name.matches("([a-z]|[A-Z]|[0-9]|_)+")
        message: "NamespaceElement's name can only contain english letters (A-Z, a-z), digits (0-9) and underscore characters (_): " + self.name
    }

    constraint ElementNameCannotContainSubsequentUnderscores {
        guard: self.satisfies("ElementNameNotEmpty")

        check: not "__".isSubstringOf(self.name)
        message: "NamespaceElement's name cannot contain two subsequent underscore characters: " + self.name
    }

    constraint ElementNameFirstCharacterCannotBeDigit {
        guard: self.satisfies("ElementNameNotEmpty")

        check: self.name.characterAt(0).matches("[a-z]|[A-Z]|_")
        message: "NamespaceElement's name must start with an english letter or an underscore: " + self.name
    }

    constraint ElementNameLastCharacterCannotBeUnderscore {
        guard: self.satisfies("ElementNameNotEmpty")

        check: not self.name.endsWith("_")
        message: "NamespaceElement's name must end with an english letter or a digit: " + self.name
    }
 }
 
context PSM!StaticNavigation {
    
    // static navigation type names should be unique
    critique StaticNavigationNamesAreUnique {
        check: not PSM!StaticNavigation.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Static navigation name is not unique: " + self.name
    }
}

context PSM!StaticData {
    
    // static navigation type names should be unique
    critique StaticDataNamesAreUnique {
        check: not PSM!StaticData.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Static data name is not unique: " + self.name
    }
}

context PSM!UnboundOperation {
    
    // static navigation type names should be unique
    critique UnboundOperationNamesAreUnique {
        check: not PSM!UnboundOperation.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Unbound operation name is not unique: " + self.name
    }
}

context PSM!AccessPoint {
    
    // static navigation type names should be unique
    critique AccessPointNamesAreUnique {
        check: not PSM!AccessPoint.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Access point name is not unique: " + self.name
    }
}




