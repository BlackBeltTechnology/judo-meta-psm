context DurationUnit {

    // rate of second unit to smaller temporal unit(s) must be valid
    constraint SecondRateIsValid {
        guard: self.unitType = DurationType#second
        
        check {
        	var rateToMillisecond = psmUtils.getRate(self, DurationType#millisecond);
            return not rateToMillisecond.isPresent() or rateToMillisecond.get().dividend == rateToMillisecond.get().divisor * 1000.0;
        }
        message: "Rate of second (" + self.name + ") temporal measure unit is invalid"
    }
    
    // rate of minute unit to smaller temporal unit(s) must be valid
    constraint MinuteRateIsValid {
        guard: self.unitType = DurationType#minute
        
        check {
        	var rateToMillisecond = psmUtils.getRate(self, DurationType#millisecond);
        	var rateToSecond = psmUtils.getRate(self, DurationType#second);
            return (not rateToMillisecond.isPresent() or rateToMillisecond.get().dividend == rateToMillisecond.get().divisor * 60000.0) and
                   (not rateToSecond.isPresent() or rateToSecond.get().dividend == rateToSecond.get().divisor * 60.0);
        }
        message: "Rate of minute (" + self.name + ") temporal measure unit is invalid"
    }

    // rate of hour unit to smaller temporal unit(s) must be valid
    constraint HourRateIsValid {
        guard: self.unitType = DurationType#hour
        
        check {
        	var rateToMillisecond = psmUtils.getRate(self, DurationType#millisecond);
        	var rateToSecond = psmUtils.getRate(self, DurationType#second);
        	var rateToMinute = psmUtils.getRate(self, DurationType#minute);
            return (not rateToMillisecond.isPresent() or rateToMillisecond.get().dividend == rateToMillisecond.get().divisor * 3600000.0) and
                   (not rateToSecond.isPresent() or rateToSecond.get().dividend == rateToSecond.get().divisor * 3600.0) and 
                   (not rateToMinute.isPresent() or rateToMinute.get().dividend == rateToMinute.get().divisor * 60.0);
        }
        message: "Rate of hour (" + self.name + ") temporal measure unit is invalid"
    }
    
    // rate of day unit to smaller temporal unit(s) must be valid
    constraint DayRateIsValid {
        guard: self.unitType = DurationType#day
        
        check {
        	var rateToMillisecond = psmUtils.getRate(self, DurationType#millisecond);
        	var rateToSecond = psmUtils.getRate(self, DurationType#second);
        	var rateToMinute = psmUtils.getRate(self, DurationType#minute);
        	var rateToHour = psmUtils.getRate(self, DurationType#hour);
            return (not rateToMillisecond.isPresent() or rateToMillisecond.get().dividend == rateToMillisecond.get().divisor * 86400000.0) and
                   (not rateToSecond.isPresent() or rateToSecond.get().dividend == rateToSecond.get().divisor * 86400.0) and 
                   (not rateToMinute.isPresent() or rateToMinute.get().dividend == rateToMinute.get().divisor * 1440.0) and
                   (not rateToHour.isPresent() or rateToHour.get().dividend == rateToHour.get().divisor * 24.0);
        }
        message: "Rate of hour (" + self.name + ") temporal measure unit is invalid"
    }
    
    // rate of week unit to smaller temporal unit(s) must be valid
    constraint WeekRateIsValid {
        guard: self.unitType = DurationType#week
        
        check {
        	var rateToMillisecond = psmUtils.getRate(self, DurationType#millisecond);
        	var rateToSecond = psmUtils.getRate(self, DurationType#second);
        	var rateToMinute = psmUtils.getRate(self, DurationType#minute);
        	var rateToHour = psmUtils.getRate(self, DurationType#hour);
        	var rateToDay = psmUtils.getRate(self, DurationType#day);
            return (not rateToMillisecond.isPresent() or rateToMillisecond.get().dividend == rateToMillisecond.get().divisor * 604800000.0) and
                   (not rateToSecond.isPresent() or rateToSecond.get().dividend == rateToSecond.get().divisor * 604800.0) and 
                   (not rateToMinute.isPresent() or rateToMinute.get().dividend == rateToMinute.get().divisor * 10080.0) and
                   (not rateToHour.isPresent() or rateToHour.get().dividend == rateToHour.get().divisor * 168.0) and
                   (not rateToDay.isPresent() or rateToDay.get().dividend == rateToDay.get().divisor * 7.0);
        }
        message: "Rate of hour (" + self.name + ") temporal measure unit is invalid"
    }
    
    // rate of year unit to smaller temporal unit(s) must be valid
    constraint YearRateIsValid {
        guard: self.unitType = DurationType#year
        
        check {
        	var rateToMonth = psmUtils.getRate(self, DurationType#month);
            return not rateToMonth.isPresent() or rateToMonth.get().dividend == rateToMonth.get().divisor * 12.0;
        }
        message: "Rate of year (" + self.name + ") temporal measure unit is invalid"
    }
}
