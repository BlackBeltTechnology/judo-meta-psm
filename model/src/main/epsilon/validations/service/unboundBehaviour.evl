context PSM!TransferOperationBehaviour {

	guard: self.eContainer.isDefined() and 
		(self.behaviourType == PSM!TransferOperationBehaviourType#GET or
		self.behaviourType == PSM!TransferOperationBehaviourType#CREATE or
		self.behaviourType == PSM!TransferOperationBehaviourType#UPDATE or
		self.behaviourType == PSM!TransferOperationBehaviourType#DELETE or
		self.behaviourType == PSM!TransferOperationBehaviourType#SET_RELATION or
		self.behaviourType == PSM!TransferOperationBehaviourType#UNSET_RELATION or
		self.behaviourType == PSM!TransferOperationBehaviourType#ADD_ALL_TO_RELATION or
		self.behaviourType == PSM!TransferOperationBehaviourType#REMOVE_ALL_FROM_RELATION)
	
	constraint OperationIsValidUnboundBehaviour {
		check: self.eContainer.isKindOf(PSM!UnboundOperation)
		message: "'" + self.behaviourType + "' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be owned by an unbound operation."
	}

	constraint OwnerIsRelationUnboundBehaviour {
		check: self.owner.isDefined() and self.owner.isKindOf(PSM!TransferObjectRelation)
		message: "Owner of '" + self.behaviourType + "' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be a relation."
	}
}

context PSM!TransferOperationBehaviour {
	
	constraint OwnerIsRelationUnboundBehaviourGetRange {
		guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#GET_RANGE
		check: self.owner.isDefined() and self.owner.isKindOf(PSM!TransferObjectRelation)
		message: "Owner of '" + self.behaviourType + "' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be a relation."
	}
	
	constraint OwnerIsValidGetRangeBehaviour {
		guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#GET_RANGE
		check: self.eContainer.eContainer.getRelations().includes(self.owner)
		message: "Owner of '" + self.behaviourType + "' behaviour  (" + self.eContainer.eContainer.name + "." + self.eContainer.name + ") must be a relation of the transfer object type containing the operation"
	}
	
	constraint GetRangeBehaviourInputParameterIsDefined {
    	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#GET_RANGE and self.satisfies("OwnerIsValidGetRangeBehaviour")
    	check: self.eContainer.input.isDefined()
    	message: "'GET_RANGE' operation: " + self.eContainer.name + " must have an input parameter named 'input'"
    }
    
    constraint GetRangeBehaviourInputNameIsValid {
    	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#GET_RANGE and self.satisfies("GetRangeBehaviourInputParameterIsDefined")
    	check: self.eContainer.input.name == "input"
    	message: "'GET_RANGE' operation's input parameter must be named 'input' (operation: " + self.eContainer.name + ")"
    }
    
    constraint GetRangeBehaviourInputTypeIsValid {
    	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#GET_RANGE and self.satisfies("GetRangeBehaviourInputParameterIsDefined")
    	check: self.eContainer.input.type == self.owner.eContainer
    	message: "Type of 'GET_RANGE operation's input parameter must match the container of the operation (operation: " + self.eContainer.name + " in " + self.owner.eContainer.name + ")"
    }
    
    constraint GetRangeBehaviourInputCardinalityIsValid {
    	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#GET_RANGE and self.satisfies("GetRangeOperationInputParameterIsDefined")
		check: self.eContainer.input.cardinality.lower == 0 and
    		self.eContainer.input.cardinality.upper == 1 
    	message: "Cardinality of 'GET_RANGE' operation's input parameter must be 0..1 (operation: " + self.eContainer.name + " in " + self.owner.eContainer.name + ")"
    }
}