context PSM!TransferOperationBehaviour {
	
	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#DELETE
	
	constraint OperationOfDeleteBehaviourIsValid {
		check: self.eContainer.isKindOf(PSM!UnboundOperation)
		message: "'DELETE' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be unbound operation"
	}
	
	constraint OwnerOfDeleteBehaviourIsExposedGraph {
		check: self.owner.isDefined() and self.owner.isKindOf(PSM!ExposedGraph)
		message: "Owner of 'DELETE' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be exposed graph."
	}
	
	constraint OwnerOfDeleteBehaviourIsValid {
		guard: self.satisfies("OwnerOfDeleteBehaviourIsExposedGraph") 
		check: self.owner.mappedTransferObjectType == self.eContainer.eContainer
		message: "Mapped transfer object of owner exposed graph of 'DELETE' operation: " + self.eContainer.name  + 
			" (in: " + self.eContainer.eContainer.name + ") must match the operation's container."
	}
	
	constraint RelationOfDeleteBehaviourIsUndefined {
		check: self.relation.isUndefined()
		message: "Relation must be undefined for 'DELETE' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ")"
	}
	
	constraint DeleteOperationInputParameterIsDefined {
    	guard: self.satisfiesAll("OperationOfDeleteBehaviourIsValid", "OwnerOfDeleteBehaviourIsValid", "RelationOfDeleteBehaviourIsUndefined")
    	check: self.eContainer.input.isDefined()
    	message: "'DELETE' operation must have an input parameter named 'input' (operation: " + self.eContainer.name + ")"
    }
    
    constraint DeleteOperationInputNameIsValid {
    	guard: self.satisfiesAll("DeleteOperationInputParameterIsDefined", "OperationOfDeleteBehaviourIsValid", "OwnerOfDeleteBehaviourIsValid", "RelationOfDeleteBehaviourIsUndefined")
    	check: self.eContainer.input.name == "input"
    	message: "'DELETE' operation's input parameter must be named 'input' (operation: " + self.eContainer.name + ")"
    }
    
    constraint DeleteOperationInputTypeIsValid {
    	guard: self.satisfiesAll("DeleteOperationInputParameterIsDefined", "OperationOfDeleteBehaviourIsValid", "OwnerOfDeleteBehaviourIsValid", "RelationOfDeleteBehaviourIsUndefined")
    	check: self.eContainer.input.type.getAllSuperTransferObjectTypes().including(self.eContainer.input.type).includes(self.owner.mappedTransferObjectType)
    	message: "Type of 'DELETE' operation's input parameter must be kind of exposed graph's mapped transfer object type (operation: " + self.eContainer.name + ")"
    }
    
    constraint DeleteOperationInputCardinalityIsValid {
    	guard: self.satisfiesAll("DeleteOperationInputParameterIsDefined", "OperationOfDeleteBehaviourIsValid", "OwnerOfDeleteBehaviourIsValid", "RelationOfDeleteBehaviourIsUndefined")
    	check: self.eContainer.input.cardinality.lower == 1 and
    		self.eContainer.input.cardinality.upper == 1 
    	message: "Cardinality of 'DELETE' operation's input parameter must be 1..1 (operation: " + self.eContainer.name + ")"
    }
    
    constraint DeleteOperationOutputParameterIsNotDefined {
    	guard: self.satisfiesAll("OperationOfDeleteBehaviourIsValid", "OwnerOfDeleteBehaviourIsValid", "RelationOfDeleteBehaviourIsUndefined")
    	check: self.eContainer.output.isUndefined()
    	message: "'DELETE' operation cannot have an output parameter (operation: " + self.eContainer.name + ")"
    }
}
