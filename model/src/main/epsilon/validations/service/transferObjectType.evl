context PSM!TransferObjectType {

    // transfer object type names should be unique
    critique TransferObjectTypeNamesAreUnique {
        guard: self.satisfies("NamedElementIsUniqueInItsContainer")
        check: not PSM!TransferObjectType.all.excluding(self).selectOne(t | t.name.toLowerCase() == self.name.toLowerCase()).isDefined()
        message: "Transfer object type name is not unique: " + self.name
    }
    
    // check if transfer object type is inheriting unique transfer attributes
    constraint InheritingUniqueTransferAttributeNames {
        check: self.getInheritedTransferAttributeNames()
                    .forAll(n | self.getAllSuperTransferObjectTypes().collect(s | s.getAttributes()).flatten()
                                    .select(a | a.name.toLowerCase() == n.toLowerCase()).size() == 1)
        message: "Transfer object type: " + self.name + " has inherited transfer attributes of the same name."
    }
    
    // check if transfer object type is inheriting unique transfer object relations
    constraint InheritingUniqueTransferObjectRelationNames {
        check: self.getInheritedTransferObjectRelationNames()
                    .forAll(n | self.getAllSuperTransferObjectTypes().collect(s | s.getRelations()).flatten()
                                    .select(a | a.name.toLowerCase() == n.toLowerCase()).size() == 1)
        message: "Transfer object type: " + self.name + " has inherited transfer object relations of the same name."
    }
    
    constraint InheritedTransferOperationAndTransferAttributeNamesAreUnique {
        check: not self.getInheritedTransferAttributeNames().exists(name | psmUtils.getInheritedTransferOperationNames(self).exists(a | name.toLowerCase() == a.toLowerCase()))
        message: "Transfer object type: " + self.name + " has inherited transfer operation(s) and inherited transfer attribute(s) of the same name." 
    }

    constraint InheritedTransferOperationAndTransferObjectRelationNamesAreUnique {
        check: not self.getInheritedTransferObjectRelationNames().exists(name | psmUtils.getInheritedTransferOperationNames(self).exists(a | name.toLowerCase() == a.toLowerCase()))
        message:  "Transfer object type: " + self.name + " has inherited transfer operation(s) and inherited transfer object relation(s) of the same name."
    }
    
    // check if transfer object type is inheriting unique transfer attribute and transfer object relation names
    constraint InheritingAttributesAndRelationsOfTheSameNameIsNotAllowed {
        check: not self.getInheritedTransferAttributeNames()
                .exists(name | self.getInheritedTransferObjectRelationNames().exists(r | name.toLowerCase() == r.toLowerCase()))
        message: "Transfer object type: " + self.name + " has inherited transfer object relation(s) and inherited transfer attribute(s) of the same name."
    }
    
    constraint InheritanceIsNotRecursive {
		check: not self.getAllSuperTransferObjectTypes().contains(self)
		message: "Transfer object type " + self.name + " is recursive"
	}
	
	constraint InheritedUnboundOperationsAreValid {
		check: psmUtils.getInheritedUnboundOperations(self)
				.forAll(o | psmUtils.getInheritedUnboundOperationsByName(self,o.name).size() > 1 implies
							psmUtils.getInheritedUnboundOperationsByName(self,o.name).excluding(o)
								.forAll(other | psmUtils.parametersAreCompatible(o,other)))
		message: "Transfer object type: " + self.name + " is inheriting unbound operations with the same name but different signature."
	}
	
	constraint NeedToOverrideMultipleUnboundOperations {
        guard: self.getAllSuperTransferObjectTypes().select(s | s.isKindOf(PSM!TransferObjectType))
            .forAll(s | s.satisfiesAll("InheritanceIsNotRecursive","NeedToOverrideMultipleUnboundOperations"))
        check: psmUtils.getAllUnboundOperations(self)
        		.collect(o | o.name.toLowerCase())
        		.forAll(opName | psmUtils.getInheritedUnboundOperationsByName(self,opName).size() > 1 implies 
                        self.operations.exists(o | o.isKindOf(PSM!UnboundOperation) and o.name.toLowerCase() == opName.toLowerCase()))
        message: "Transfer object type: " + self.name + " must override inherited unbound operations of the same name."
    }
}
