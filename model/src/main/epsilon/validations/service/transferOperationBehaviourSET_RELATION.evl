context PSM!TransferOperationBehaviour {

	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#SET_RELATION
	
	constraint OperationOfSetRelationBehaviourIsValid {
		check: self.eContainer.isKindOf(PSM!UnboundOperation)
		message: "'SET_RELATION' behaviour: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be owned by an unbound operation"
	}
	
	constraint OwnerOfSetRelationBehaviourIsValid {
		check: self.owner.isDefined() and self.owner.isKindOf(PSM!ExposedGraph) and self.owner.mappedTransferObjectType == self.eContainer.eContainer
		message: "Owner of 'SET_RELATION' behaviour: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be an exposed graph"
	}
	
	constraint RelationOfSetRelationBehaviourIsValid {
		check: self.relation.isDefined() and psmUtils.getAllSuperTransferObjectTypes(self.owner.mappedTransferObjectType).including(self.owner.mappedTransferObjectType).contains(self.relation.eContainer)
		message: "Relation must be defined for 'SET_RELATION' behaviour: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ")"
	}
	
	constraint SetRelationOperationInputParameterIsDefined {
    	guard: self.satisfiesAll("OperationOfSetRelationBehaviourIsValid","OwnerOfSetRelationBehaviourIsValid","RelationOfSetRelationBehaviourIsValid")
    	check: self.eContainer.input.isDefined()
    	message: "Set operation must have an input parameter named 'input'"
    }
    
    constraint SetRelationOperationInputNameIsValid {
    	guard: self.satisfiesAll("SetRelationOperationInputParameterIsDefined","OperationOfSetRelationBehaviourIsValid","OwnerOfSetRelationBehaviourIsValid","RelationOfSetRelationBehaviourIsValid")
    	check: self.eContainer.input.name == "input"
    	message: "'SET_RELATION' operation's input parameter must be named 'input'"
    }
    
    constraint SetRelationOperationInputTypeIsValid {
    	guard: self.satisfiesAll("SetRelationOperationInputParameterIsDefined","OperationOfSetRelationBehaviourIsValid","OwnerOfSetRelationBehaviourIsValid","RelationOfSetRelationBehaviourIsValid")
    	check: self.eContainer.input.type.getAllSuperTransferObjectTypes().including(self.eContainer.input.type).includes(self.owner.mappedTransferObjectType)
    	message: "Type of 'SET_RELATION' operation's input parameter must be kind of referenced mapped transfer object type"
    }
    
    constraint SetRelationOperationInputCardinalityIsValid {
    	guard: self.satisfiesAll("SetRelationOperationInputParameterIsDefined","OperationOfSetRelationBehaviourIsValid","OwnerOfSetRelationBehaviourIsValid","RelationOfSetRelationBehaviourIsValid")
    	check: self.eContainer.input.cardinality.lower == 1 and
    		self.eContainer.input.cardinality.upper == 1 
    	message: "Cardinality of 'SET_RELATION' operation's input parameter must be 1..1"
    }
    
    constraint SetRelationOperationOutputParameterIsNotDefined {
    	guard: self.satisfiesAll("OperationOfSetRelationBehaviourIsValid","OwnerOfSetRelationBehaviourIsValid","RelationOfSetRelationBehaviourIsValid")
    	check: self.eContainer.output.isUndefined()
    	message: "'SET_RELATION' operation cannot have an output parameter"
    }
}
	