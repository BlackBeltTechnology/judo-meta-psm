context PSM!TransferOperationBehaviour {

	guard: self.eContainer.isDefined() and 
		(self.behaviourType == PSM!TransferOperationBehaviourType#LIST or
		self.behaviourType == PSM!TransferOperationBehaviourType#CREATE_INSTANCE or
		self.behaviourType == PSM!TransferOperationBehaviourType#VALIDATE_CREATE or
		self.behaviourType == PSM!TransferOperationBehaviourType#SET_REFERENCE or
		self.behaviourType == PSM!TransferOperationBehaviourType#UNSET_REFERENCE or
		self.behaviourType == PSM!TransferOperationBehaviourType#ADD_REFERENCE or
		self.behaviourType == PSM!TransferOperationBehaviourType#REMOVE_REFERENCE)

	constraint OwnerOfBoundBehaviourIsRelation {
		check: self.owner.isDefined() and self.owner.isKindOf(PSM!TransferObjectRelation)
		message: "Owner of '" + self.behaviourType + "' behaviour  (" 
		+ self.eContainer.eContainer.name + "." + self.eContainer.name
		+ ") must be a transfer object relation"
	}
	
	constraint OwnerOfBoundBehaviourIsValid {
		guard: self.satisfies("OwnerOfBoundBehaviourIsRelation") 
		check: self.eContainer.eContainer.getRelations().includes(self.owner)
		message: "Owner of '" + self.behaviourType + "' behaviour  (" + self.eContainer.eContainer.name + "." + self.eContainer.name + ") must be a relation of the transfer object type containing the operation"
	}
}

context PSM!TransferOperationBehaviour {

	guard: self.eContainer.isDefined() and 
			
			(self.behaviourType == PSM!TransferOperationBehaviourType#CREATE_INSTANCE or
			self.behaviourType == PSM!TransferOperationBehaviourType#VALIDATE_CREATE) and
			
			self.satisfies("OwnerOfBoundBehaviourIsRelation")and self.satisfies("OwnerOfBoundBehaviourIsValid") and
			
			self.owner.target.isKindOf(PSM!MappedTransferObjectType)
			
	constraint CreateTargetIsNotAbstract {
		check: not self.owner.target.entityType.isAbstract()
		message: "Owner of 'CREATE' operation cannot reference the mapped transfer object of an abstract entity type."
	}
}
