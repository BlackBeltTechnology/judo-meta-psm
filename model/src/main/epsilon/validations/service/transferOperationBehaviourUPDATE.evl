context PSM!TransferOperationBehaviour {
	
	guard: self.eContainer.isDefined() and self.behaviourType == PSM!TransferOperationBehaviourType#UPDATE
	
	constraint OperationOfUpdateBehaviourIsValid {
		check: self.eContainer.isKindOf(PSM!UnboundOperation)
		message: "'UPDATE' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be unbound operation"
	}
	
	constraint OwnerOfUpdateBehaviourIsExposedGraph {
		check: self.owner.isDefined() and self.owner.isKindOf(PSM!ExposedGraph)
		message: "Owner of 'UPDATE' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ") must be exposed graph."
	}
	
	constraint OwnerOfUpdateBehaviourIsValid {
		guard: self.satisfies("OwnerOfUpdateBehaviourIsExposedGraph") 
		check: self.owner.mappedTransferObjectType == self.eContainer.eContainer
		message: "Mapped transfer object of owner exposed graph of 'UPDATE' operation: " + self.eContainer.name  + 
			" (in: " + self.eContainer.eContainer.name + ") must match the operation's container."
	}
	
	constraint RelationOfUpdateBehaviourIsUndefined {
		check: self.relation.isUndefined()
		message: "Relation must be undefined for 'UPDATE' operation: " + self.eContainer.name  + " (in: " + self.eContainer.eContainer.name + ")"
	}
	
	constraint UpdateOperationInputParameterIsDefined {
    	guard: self.satisfiesAll("OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.input.isDefined()
    	message: "'UPDATE' operation must have an input parameter named 'input' (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationInputNameIsValid {
    	guard: self.satisfiesAll("UpdateOperationInputParameterIsDefined","OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.input.name == "input"
    	message: "'UPDATE' operation's input parameter must be named 'input' (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationInputTypeIsValid {
    	guard: self.satisfiesAll("UpdateOperationInputParameterIsDefined","OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.input.type.getAllSuperTransferObjectTypes().including(self.eContainer.input.type).includes(self.owner.mappedTransferObjectType)
    	message: "Type of 'UPDATE' operation's input parameter must be kind of exposed graph's mapped transfer object type (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationInputCardinalityIsValid {
    	guard: self.satisfiesAll("UpdateOperationInputParameterIsDefined","OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.input.cardinality.lower == 1 and
    		self.eContainer.input.cardinality.upper == 1 
    	message: "Cardinality of 'UPDATE' operation's input parameter must be 1..1 (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationOutputParameterIsDefined {
    	guard: self.satisfiesAll("OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.output.isDefined()
    	message: "'UPDATE' operation must have an output parameter named 'output' (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationOutputNameIsValid {
    	guard: self.satisfiesAll("UpdateOperationOutputParameterIsDefined","OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.output.name == "output"
    	message: "'UPDATE' operation's output parameter must be named 'output' (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationOutputTypeIsValid {
    	guard: self.satisfiesAll("UpdateOperationOutputParameterIsDefined","OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.owner.mappedTransferObjectType.getAllSuperTransferObjectTypes()
    			.including(self.owner.mappedTransferObjectType)
    			.includes(self.eContainer.output.type)
    	message: "Type of 'UPDATE' operation's output parameter must be exposed graph's mapped transfer object type or its supertype (operation: " + self.eContainer.name + ")"
    }
    
    constraint UpdateOperationOutputCardinalityIsValid {
    	guard: self.satisfiesAll("UpdateOperationOutputParameterIsDefined","OperationOfUpdateBehaviourIsValid", "OwnerOfUpdateBehaviourIsValid", "RelationOfUpdateBehaviourIsUndefined")
    	check: self.eContainer.output.cardinality.lower == 1 and
    		self.eContainer.output.cardinality.upper == 1 
    	message: "Cardinality of 'UPDATE' operation's output parameter must be 1..1 (operation: " + self.eContainer.name + ")"
    }
}
