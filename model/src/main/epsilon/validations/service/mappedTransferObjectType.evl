context PSM!MappedTransferObjectType{
    
    constraint EntityTypeMatchesEntityTypeOfBaseMappedTransferObject {
        check: self.getAllSuperTransferObjectTypes().select(t | t.isKindOf(PSM!MappedTransferObjectType))
                            .forAll(sto | self.entityType.getAllSuperEntityTypes().including(self.entityType).contains(sto.entityType))
        message: "Entity type of mapped transfer object type: " + self.name + " must derive from the entity types of the base mapped transfer object type of mapped transfer object type: " + self.name
    }
    
    constraint InheritedBoundTransferOperationAndUnboundOperationNamesAreUnique {
        check: not psmUtils.getInheritedBoundTransferOperationNames(self).exists(name | psmUtils.getInheritedUnboundOperationNames(self).exists(a | name.toLowerCase() == a.toLowerCase()))
        message: "Entity type: " + self.name + " has inherited bound transfer operation(s) and inherited unbound transfer operation(s) of the same name." 
    }
    
    constraint InheritedBoundTransferOperationsAreValid {
		check: psmUtils.getInheritedBoundTransferOperations(self)
				.forAll(o | psmUtils.getInheritedBoundTransferOperations(self).excluding(o).forAll(other | other.name.toLowerCase() == o.name.toLowerCase() 
							implies psmUtils.parametersAreCompatible(o,other)))
		message: "Transfer object type: " + self.name + " is inheriting bound transfer operations with the same name but different signature."
	}
/*
    constraint NeedToOverrideMultipleOperationImplementations {
        guard: self.satisfiesAll("InheritanceIsNotRecursive","InheritedOperationsAreValid")
        check: self.getAllOperationNames().forAll(opName | psmUtils.getInheritedNonAbstractOperationsByName(self,opName).size() > 1 implies 
                        self.operations.exists(o | o.name.toLowerCase() == opName.toLowerCase()))
        message: "Transfer object type: " + self.name + " has inherited operations without implementation, "
                + "but their bases have more than one implementation."
    }*/
}
